name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # 匹配版本标签如 v1.0.0, v0.3.0 等

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - build: x86_64-linux
            os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            binary_name: summer_player
            asset_name: summer_player-linux-amd64
            build_deb: true
            deb_arch: amd64
            deb_asset_name: summer_player-amd64.deb
          - build: aarch64-linux
            os: ubuntu-22.04-arm
            target: aarch64-unknown-linux-gnu
            binary_name: summer_player
            asset_name: summer_player-linux-arm64
            build_deb: true
            deb_arch: arm64
            deb_asset_name: summer_player-arm64.deb
          - build: x86_64-windows
            os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: summer_player.exe
            asset_name: summer_player-windows-amd64.exe
            build_deb: false
          - build: x86_64-macos
            os: macos-latest
            target: x86_64-apple-darwin
            binary_name: summer_player
            asset_name: summer_player-macos-amd64
            build_deb: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    # 在Linux上安装必要的依赖
    - name: Install Linux dependencies
      if: matrix.build_deb == true
      run: |
        sudo apt-get update
        sudo apt-get install -y libasound2-dev pkg-config libfontconfig1-dev libxkbcommon-dev

    # 在Linux上安装必要的依赖（仅二进制构建）
    - name: Install Linux dependencies (binary only)
      if: contains(matrix.os, 'ubuntu') && matrix.build_deb == false
      run: |
        sudo apt-get update
        sudo apt-get install -y libasound2-dev pkg-config

    # 在Windows上安装必要的依赖（如果需要）
    - name: Install Windows dependencies
      if: matrix.os == 'windows-latest'
      run: |
        # Windows通常不需要额外的系统依赖，Rust的cpal会处理音频

    # 在macOS上安装必要的依赖（如果需要）
    - name: Install macOS dependencies
      if: matrix.os == 'macos-latest'
      run: |
        # macOS通常不需要额外的系统依赖

    # 安装cargo-deb（仅在需要构建DEB包时）
    - name: Install cargo-deb
      if: matrix.build_deb == true
      run: cargo install cargo-deb

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Prepare binary
      shell: bash
      run: |
        mkdir -p artifacts
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} artifacts/${{ matrix.asset_name }}
        else
          cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} artifacts/${{ matrix.asset_name }}
          chmod +x artifacts/${{ matrix.asset_name }}
        fi

    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: artifacts/${{ matrix.asset_name }}

    # 构建DEB包（仅在Linux平台）
    - name: Build DEB package
      if: matrix.build_deb == true
      run: cargo deb --target ${{ matrix.target }}

    - name: Prepare DEB file for upload
      if: matrix.build_deb == true
      run: |
        DEB_FILE=$(find target/${{ matrix.target }}/debian -name "*.deb" | head -1)
        mkdir -p artifacts/deb-${{ matrix.deb_arch }}
        cp "$DEB_FILE" "artifacts/deb-${{ matrix.deb_arch }}/"
        echo "Copied DEB file: $(basename "$DEB_FILE")"

    - name: Upload DEB artifact
      if: matrix.build_deb == true
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.deb_asset_name }}
        path: artifacts/deb-${{ matrix.deb_arch }}/*.deb

  release:
    name: Create Release
    needs: [build]
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Display structure of downloaded files
      run: ls -laR artifacts/

    - name: Prepare release files
      run: |
        mkdir -p release_files
        
        # 复制二进制文件
        cp artifacts/summer_player-linux-amd64/summer_player-linux-amd64 release_files/
        cp artifacts/summer_player-windows-amd64.exe/summer_player-windows-amd64.exe release_files/
        cp artifacts/summer_player-macos-amd64/summer_player-macos-amd64 release_files/
        cp artifacts/summer_player-linux-arm64/summer_player-linux-arm64 release_files/
        
        # 复制DEB包
        find artifacts/summer_player-amd64.deb -name "*.deb" -exec cp {} release_files/ \; 2>/dev/null || true
        find artifacts/summer_player-arm64.deb -name "*.deb" -exec cp {} release_files/ \; 2>/dev/null || true
        
        # 显示准备好的文件
        ls -la release_files/

    - name: Create Release and Upload Assets
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        name: Summer Player ${{ github.ref_name }}
        draft: false
        prerelease: false
        body: |
          ## Summer Player Release ${{ github.ref_name }}
          
          ### 下载说明
          - **Linux x86_64**: 下载 `summer_player-linux-amd64` 二进制文件或 `summer_player_*_amd64.deb` 安装包
          - **Linux ARM64**: 下载 `summer_player-linux-arm64` 二进制文件或 `summer_player_*_arm64.deb` 安装包
          - **Windows**: 下载 `summer_player-windows-amd64.exe`
          - **macOS**: 下载 `summer_player-macos-amd64`
          
          ### 安装说明
          #### Linux
          - 二进制文件：下载后添加可执行权限：
            - x86_64: `chmod +x summer_player-linux-amd64`
            - ARM64: `chmod +x summer_player-linux-arm64`
          - DEB包：使用 `sudo dpkg -i summer_player_*.deb` 安装
            - x86_64: 安装 `*_amd64.deb` 包
            - ARM64: 安装 `*_arm64.deb` 包
          
          #### Windows
          直接运行 `summer_player-windows-amd64.exe`
          
          #### macOS
          下载后添加可执行权限：`chmod +x summer_player-macos-amd64`
        files: |
          release_files/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 